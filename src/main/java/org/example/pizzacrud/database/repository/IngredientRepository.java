package org.example.pizzacrud.database.repository;

import org.example.pizzacrud.database.datasource.DataSource;
import org.example.pizzacrud.database.entity.Ingredient;
import org.example.pizzacrud.database.repository.exception.InternalDatabaseException;
import org.example.pizzacrud.database.repository.exception.NoChangesMadeException;
import org.example.pizzacrud.database.repository.exception.NoObjectException;
import org.example.pizzacrud.database.repository.exception.WrongKeyException;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Ingredient Repository provides access to database Ingredient entities
 */
public class IngredientRepository implements Repository<Ingredient, Integer> {

    /**
     * Select all Ingredients from database
     *
     * @return List of all ingredients from database
     * @throws InternalDatabaseException Internal database error
     */
    @Override
    public List<Ingredient> findAll() throws InternalDatabaseException {
        final String SQL = "select id, name from Ingredients";

        List<Ingredient> ingredients = new ArrayList<>();

        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SQL)) {

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Ingredient ingredient = buildIngredientFromResultSet(rs);
                ingredients.add(ingredient);
            }
        } catch (SQLException e) {
            throw new InternalDatabaseException(e);
        }

        return ingredients;
    }

    /**
     * Select an Ingredient by id
     *
     * @param id id of an Ingredient that must be found
     * @return Optional object that contains found ingredient
     * or empty if none was found by given id
     * @throws InternalDatabaseException Internal database error
     */
    @Override
    public Optional<Ingredient> findById(Integer id) throws InternalDatabaseException {
        if (id <= 0) {
            throw new WrongKeyException();
        }
        final String SQL = "select id, name from Ingredients where id = ?";

        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SQL)) {

            stmt.setInt(1, id);

            ResultSet resultSet = stmt.executeQuery();
            if (!resultSet.next()) {
                return Optional.empty();
            }
            return Optional.of(buildIngredientFromResultSet(resultSet));
        } catch (SQLException e) {
            throw new InternalDatabaseException(e);
        }
    }

    /**
     * Insert new or update existing ingredient.
     * If Ingredient.id if valid (greater than zero) method will update Ingredient by this id.
     * Else new record wil be inserted into database
     *
     * @param ingredient object to be saved to database
     * @return same object that was provided in parameter.
     * In case of Insert operation new id is set
     * @throws InternalDatabaseException Internal database error
     * @throws NoChangesMadeException    database returned no rows was affected
     */
    @Override
    public Ingredient save(Ingredient ingredient) throws InternalDatabaseException, NoChangesMadeException {
        if (ingredient == null) {
            throw new NoObjectException();
        }
        if (ingredient.getId() <= 0) {
            return create(ingredient);
        } else {
            return update(ingredient);
        }
    }

    /**
     * Updates ingredient by ingredient.id
     *
     * @param ingredient ingredient to be updated
     * @return same ingredient as in parameters
     * @throws NoChangesMadeException    database returned no rows was affected
     * @throws InternalDatabaseException Internal database error
     */
    @Override
    public Ingredient update(Ingredient ingredient) throws NoChangesMadeException, InternalDatabaseException {
        if (ingredient == null) {
            throw new NoObjectException();
        }
        final String SQL = "update Ingredients set name = ? where id = ?";

        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SQL)) {

            stmt.setString(1, ingredient.getName());
            stmt.setInt(2, ingredient.getId());

            int affectedRows = stmt.executeUpdate();
            ifNoAffectedRowsThrow(affectedRows);
        } catch (NoChangesMadeException e) {
            throw e;
        } catch (SQLException e) {
            throw new InternalDatabaseException(e);
        }
        return ingredient;
    }

    /**
     * Insert new ingredient into database.
     * Its initial id is ignored and will be replaced by id generated by database.
     *
     * @param ingredient ingredient to be inserted
     * @return parameter ingredient with id set from database
     * @throws InternalDatabaseException Internal database error
     * @throws NoChangesMadeException    Database returned no rows was affected
     */
    @Override
    public Ingredient create(Ingredient ingredient) throws InternalDatabaseException, NoChangesMadeException {
        if (ingredient == null) {
            throw new NoObjectException();
        }
        final String SQL = "insert into Ingredients (name) values (?)";

        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SQL,
                     Statement.RETURN_GENERATED_KEYS)) {

            stmt.setString(1, ingredient.getName());

            int affectedRows = stmt.executeUpdate();
            ifNoAffectedRowsThrow(affectedRows);

            setGeneratedKeysFromStatement(ingredient, stmt);

            return ingredient;
        } catch (SQLException e) {
            throw new InternalDatabaseException(e);
        }
    }

    /**
     * Delete Ingredient by its id
     *
     * @param id id of an Ingredient to be deleted
     * @throws InternalDatabaseException Internal database error
     * @throws NoChangesMadeException    Database returned no rows was affected
     */
    @Override
    public void delete(Integer id) throws InternalDatabaseException, NoChangesMadeException {
        if (id <= 0) {
            throw new WrongKeyException();
        }
        final String SQL = "delete from Ingredients where id = ?";

        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SQL)) {

            stmt.setInt(1, id);
            int affectedRows = stmt.executeUpdate();
            ifNoAffectedRowsThrow(affectedRows);
        } catch (NoChangesMadeException e) {
            throw e;
        } catch (SQLException e) {
            throw new InternalDatabaseException(e);
        }
    }

    /**
     * Test if Ingredient by id exists in database
     *
     * @param id id of an Ingredient to be tested
     * @return true if found, false otherwise
     * @throws InternalDatabaseException Internal database error
     */
    @Override
    public boolean exists(Integer id) throws InternalDatabaseException {
        Optional<Ingredient> ingredientOptional = findById(id);
        return ingredientOptional.isPresent();
    }

    /**
     * Find all ingredient that are parts of a pizza by its id
     *
     * @param pizzaId id of a pizza to find INgredients
     * @return List of ingredient of the pizza
     * @throws InternalDatabaseException Internal database error
     */
    public List<Ingredient> findByPizzaId(int pizzaId) throws InternalDatabaseException {
        if (pizzaId <= 0) {
            throw new WrongKeyException();
        }
        final String SQL = "select Ingredients.id AS id, name from Ingredients LEFT JOIN m2m_Pizzas_Ingredients ON Ingredients.id=ingredient_id WHERE pizza_id=?";
        List<Ingredient> ingredients = new ArrayList<>();
        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SQL)) {

            stmt.setInt(1, pizzaId);

            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
                Ingredient ingredient = buildIngredientFromResultSet(resultSet);
                ingredients.add(ingredient);
            }
        } catch (SQLException e) {
            throw new InternalDatabaseException(e);
        }
        return ingredients;
    }

    /**
     * Saves multiple Ingredients
     *
     * @param ingredients List of Ingredients
     * @throws InternalDatabaseException Internal database error
     */
    public boolean saveAll(List<Ingredient> ingredients) throws InternalDatabaseException {
        final String SQL = "insert into Ingredients (name) values (?)";
        Connection conn;

        try {
            conn = DataSource.getConnection();
        } catch (SQLException e) {
            throw new InternalDatabaseException(e);
        }
        try (PreparedStatement statement = conn.prepareStatement(SQL, Statement.RETURN_GENERATED_KEYS)) {
            conn.setAutoCommit(false);
            for (Ingredient ingredient : ingredients) {
                statement.setString(1, ingredient.getName());
                statement.addBatch();
            }
            statement.executeBatch();
            conn.commit();
            conn.close();
            return true;
        } catch (SQLException e) {
            try {
                conn.rollback();
                conn.close();
            } catch (SQLException ex) {
                throw new InternalDatabaseException(ex);
            }

            return false;
        }
    }

    /**
     * Build ingredient from ResultSet row
     * ResultSet must be prepared by calling ResultSet::next()
     * so its current row is the ingredient to be build
     *
     * @param rs ResultSet prepared by calling ResultSet::next()
     * @return Build Ingredient object
     * @throws SQLException Internal database error
     */
    protected Ingredient buildIngredientFromResultSet(ResultSet rs) throws SQLException {
        Ingredient ingredient = new Ingredient();
        ingredient.setId(rs.getInt("id"));
        ingredient.setName(rs.getString("name"));
        return ingredient;
    }

    /**
     * Obtains generated keys ResultSet of a PreparedStatement
     * and fill id of an Ingredient with data from that ResultSet
     *
     * @param ingredient Ingredient for id set
     * @param stmt       Executed PreparedStatement that contains generated key
     * @throws SQLException Internal database error
     */
    private void setGeneratedKeysFromStatement(Ingredient ingredient, PreparedStatement stmt) throws SQLException {
        ResultSet resultSet = stmt.getGeneratedKeys();
        resultSet.next();
        int id = resultSet.getInt(1);
        ingredient.setId(id);
    }

    /**
     * Tests if any row was affected by and throws NoChangeMadeException if not
     *
     * @param affectedRows amount of affected rows
     * @throws NoChangesMadeException Database returned no rows was affected
     */
    private void ifNoAffectedRowsThrow(int affectedRows) throws NoChangesMadeException {
        if (affectedRows == 0) {
            throw new NoChangesMadeException("New Ingredient is not created");
        }
    }
}
