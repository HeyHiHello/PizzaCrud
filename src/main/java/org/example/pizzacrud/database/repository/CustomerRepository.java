package org.example.pizzacrud.database.repository;

import org.example.pizzacrud.database.datasource.DataSource;
import org.example.pizzacrud.database.entity.Address;
import org.example.pizzacrud.database.entity.Customer;
import org.example.pizzacrud.database.repository.exception.InternalDatabaseException;
import org.example.pizzacrud.database.repository.exception.NoChangesMadeException;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class CustomerRepository implements Repository<Customer, Integer> {

    /**
     * Find All Customers in Database
     *
     * @return List of all customers
     * @throws InternalDatabaseException Internal Database Exception
     */
    @Override
    public List<Customer> findAll() throws InternalDatabaseException {
        List<Customer> customers = new ArrayList<>();
        String sql = "SELECT Customers.id as id, firstname, lastname, city, street, building FROM Customers LEFT JOIN Addresses ON Customers.id = Addresses.id";
        try (Connection connection = DataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                Customer customer = buildFromResultSet(resultSet);
                customers.add(customer);
            }
        } catch (SQLException e) {
            throw new InternalDatabaseException(e);
        }
        return customers;
    }

    /**
     * Find Customer by id
     *
     * @param id id of a customer
     * @return Optional object that contains found Customer
     * or empty if none was found by given id
     */
    @Override
    public Optional<Customer> findById(Integer id) {
        String sql = "SELECT Customers.id as id, firstname, lastname, city, street, building FROM Customers LEFT JOIN Addresses ON Customers.id = Addresses.id WHERE Customers.id = ?";
        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);

            ResultSet rs = stmt.executeQuery();
            if (!rs.next()) {
                return Optional.empty();
            }
            Customer customer = buildFromResultSet(rs);
            return Optional.of(customer);
        } catch (SQLException e) {
            return Optional.empty();
        }
    }

    /**
     * Create new or update existing Customer.
     * If id = 0 then new Customer will be created else existing user will be updated
     *
     * @param customer Customer with id set to generated by database if new Customer was created
     * @return Customer from argument.
     * If new Customer was created its id is set to one generated by databse
     * @throws SQLException Internal database exception
     */
    @Override
    public Customer save(Customer customer) throws SQLException {
        if (customer.getId() == 0) {
            return create(customer);
        } else {
            return update(customer);
        }
    }

    /**
     * Insert new customer into database
     *
     * @param customer Customer to be inserted
     * @return Same Customer as in arguments with id set to generated value
     * @throws SQLException Internal database error
     */
    @Override
    public Customer create(Customer customer) throws SQLException {

        Connection conn = DataSource.getConnection();
        try {
            conn.setAutoCommit(false);

            insertCustomer(customer, conn);
            customer.getAddress().setId(customer.getId());
            insertAddress(customer.getAddress(), conn);

            conn.commit();
            conn.close();
            return customer;
        } catch (SQLException e) {
            conn.rollback();
            conn.close();
            throw e;
        }
    }

    /**
     * Update Customer in database
     *
     * @param customer Customer to be updated
     * @return Same Customer as in arguments
     * @throws SQLException Internal database exception
     */
    @Override
    public Customer update(Customer customer) throws SQLException {

        Connection conn = DataSource.getConnection();
        try {
            conn.setAutoCommit(false);
            updateCustomer(customer, conn);
            updateAddress(customer.getAddress(), conn);
            conn.commit();
            conn.close();
            return customer;
        } catch (SQLException e) {
            conn.rollback();
            conn.close();
            throw e;
        }
    }

    /**
     * Delete Customer by id
     *
     * @param id id of a customer to be deleted
     * @throws SQLException Internal database error
     */
    @Override
    public void delete(Integer id) throws SQLException {
        String sql = "DELETE FROM Customers WHERE id = ?";
        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected == 0) {
                throw new NoChangesMadeException();
            }
        }
    }

    /**
     * Test if Customer exists in database
     *
     * @param id id of a customer to be checked
     * @return true if customer exists false otherwise
     * @throws SQLException Internal database error
     */
    @Override
    public boolean exists(Integer id) throws SQLException {
        Optional<Customer> customer = findById(id);
        return customer.isPresent();
    }

    private void insertCustomer(Customer customer, Connection conn) throws SQLException {
        String insertCustomerSql = "INSERT INTO Customers (firstname, lastname) VALUES (?, ?)";

        try (PreparedStatement customerStmt = conn.prepareStatement(insertCustomerSql, Statement.RETURN_GENERATED_KEYS)) {

            customerStmt.setString(1, customer.getFirstname());
            customerStmt.setString(2, customer.getLastname());

            int customerAffectedRows = customerStmt.executeUpdate();
            if (customerAffectedRows == 0) {
                throw new NoChangesMadeException();
            }

            ResultSet rs = customerStmt.getGeneratedKeys();
            if (rs.next()) {
                customer.setId(rs.getInt(1));
                return;
            }
            throw new InternalDatabaseException("No generated key has returned for Customer " + customer);
        }

    }

    private void insertAddress(Address address, Connection conn) throws SQLException {

        String insertAddressSql = "INSERT INTO Addresses (id, city, street, building) VALUES (?, ?, ?, ?)";
        try (PreparedStatement addressStmt = conn.prepareStatement(insertAddressSql)) {
            addressStmt.setInt(1, address.getId());
            addressStmt.setString(2, address.getCity());
            addressStmt.setString(3, address.getStreet());
            addressStmt.setString(4, address.getBuilding());
            int addressAffectedRows = addressStmt.executeUpdate();
            if (addressAffectedRows == 0) {
                throw new NoChangesMadeException();
            }
        }

    }

    private void updateCustomer(Customer customer, Connection conn) throws SQLException {
        String sql = "UPDATE Customers SET firstname=?, lastname=? WHERE id = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, customer.getFirstname());
            stmt.setString(2, customer.getLastname());
            stmt.setInt(3, customer.getId());

            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected == 0) {
                throw new NoChangesMadeException();
            }
        }
    }

    private void updateAddress(Address address, Connection conn) throws SQLException {
        String sql = "UPDATE Addresses SET city=?, street=?, building=? WHERE id = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, address.getCity());
            stmt.setString(2, address.getStreet());
            stmt.setString(3, address.getBuilding());
            stmt.setInt(4, address.getId());

            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected == 0) {
                throw new NoChangesMadeException();
            }
        }
    }

    private Customer buildFromResultSet(ResultSet resultSet) throws SQLException {
        Customer customer = new Customer();
        customer.setFirstname(resultSet.getString("firstname"));
        customer.setLastname(resultSet.getString("lastname"));
        customer.setId(resultSet.getInt("id"));

        Address address = new Address();
        address.setCity(resultSet.getString("city"));
        address.setStreet(resultSet.getString("street"));
        address.setBuilding(resultSet.getString("building"));
        customer.setAddress(address);

        return customer;
    }
}
