package org.example.pizzacrud.database.repository;

import org.example.pizzacrud.database.datasource.DataSource;
import org.example.pizzacrud.database.entity.Customer;
import org.example.pizzacrud.database.entity.Order;
import org.example.pizzacrud.database.entity.Pizza;
import org.example.pizzacrud.database.repository.exception.InternalDatabaseException;
import org.example.pizzacrud.database.repository.exception.NoChangesMadeException;
import org.example.pizzacrud.database.repository.exception.WrongKeyException;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class OrderRepository implements Repository<Order, Integer> {
    private final PizzaRepository pizzaRepository = RepositoryBuilder.buildPizzaRepository();

    /**
     * Find all Orders in database
     *
     * @return List of Orders
     * @throws SQLException Internal database exception
     */
    @Override
    public List<Order> findAll() throws SQLException {
        String sql = "SELECT id, customer_id FROM Orders";
        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            ResultSet resultSet = stmt.executeQuery();
            List<Order> orders = new ArrayList<>();
            while (resultSet.next()) {
                Order order = buildOrderFromResultSet(resultSet);
                orders.add(order);
            }
            return orders;
        }
    }

    /**
     * Find Order by id
     *
     * @param id id of an order to be found
     * @return Optional Order
     */
    @Override
    public Optional<Order> findById(Integer id) {
        if (id <= 0) {
            throw new WrongKeyException("Invalid order id " + id);
        }
        String sql = "select id, customer_id from Orders where id = ?";
        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            ResultSet resultSet = stmt.executeQuery();
            if (resultSet.next()) {
                return Optional.of(buildOrderFromResultSet(resultSet));
            }
            return Optional.empty();
        } catch (SQLException e) {
            return Optional.empty();
        }
    }

    /**
     * Insert new order into database
     *
     * @param order order to be inserted.
     *              Its id is ignored and will be replaced for generated by database
     * @return Order with id set by database
     * @throws SQLException Internal database exception
     */
    @Override
    public Order create(Order order) throws SQLException {
        Connection conn = DataSource.getConnection();
        try {
            conn.setAutoCommit(false);
            insertOrder(order, conn);
            insertOrderPizzas(order, conn);
            conn.commit();
            conn.close();
            return order;
        } catch (SQLException e) {
            conn.rollback();
            conn.close();
            throw e;
        }
    }

    private void insertOrder(Order order, Connection conn) throws InternalDatabaseException {
        String sql = "INSERT INTO Orders (customer_id) VALUES (?)";
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, order.getCustomer().getId());
            int affectedRows = stmt.executeUpdate();
            if (affectedRows == 0) {
                throw new NoChangesMadeException();
            }

            ResultSet resultSet = stmt.getGeneratedKeys();
            if (!resultSet.next()) {
                throw new InternalDatabaseException("No key has returned for Order " + order);
            }
            order.setId(resultSet.getInt(1));
        } catch (SQLException e) {
            throw new InternalDatabaseException(e);
        }
    }

    private void insertOrderPizzas(Order order, Connection conn) throws InternalDatabaseException {
        String sql = "INSERT INTO m2m_Pizza_Order (pizza_id, order_id) VALUES (?, ?)";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            for (Pizza pizza : order.getPizzas()) {
                stmt.setInt(1, pizza.getId());
                stmt.setInt(2, order.getId());

                stmt.addBatch();
            }
            stmt.executeBatch();
        } catch (SQLException e) {
            throw new InternalDatabaseException(e);
        }
    }

    /**
     * Delete order from database
     *
     * @param id id of an order to be deleted
     * @throws SQLException Internal database exception
     */
    @Override
    public void delete(Integer id) throws SQLException {
        String sql = "DELETE FROM Orders WHERE id = ?";
        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            int affectedRows = stmt.executeUpdate();
            if (affectedRows == 0) {
                throw new NoChangesMadeException();
            }
        }
    }

    /**
     * Test if Order exists in database
     *
     * @param id id of an Order to be tested
     * @return true if found, false otherwise
     * @throws SQLException Internal database error
     */
    @Override
    public boolean exists(Integer id) throws SQLException {
        Optional<Order> order = findById(id);
        return order.isPresent();
    }

    /**
     * Find all Orders made by given customer
     *
     * @param customerId id of a customer
     * @return List of Orders
     * @throws SQLException Internal database exception
     */
    public List<Order> findAllByCustomerId(int customerId) throws SQLException {
        String sql = "select id, customer_id from Orders where customer_id = ?";

        List<Order> orders = new ArrayList<>();
        try (Connection conn = DataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, customerId);

            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
                Order order = buildOrderFromResultSet(resultSet);
                orders.add(order);
            }
            return orders;
        }
    }

    private Order buildOrderFromResultSet(ResultSet resultSet) throws SQLException {
        Order order = new Order();
        order.setId(resultSet.getInt("id"));
        List<Pizza> pizzas = pizzaRepository.getPizzasByOrderId(order.getId());
        order.setPizzas(pizzas);
        order.setCustomer(new Customer(resultSet.getInt("customer_id"), null, null, null));
        return order;
    }
}
